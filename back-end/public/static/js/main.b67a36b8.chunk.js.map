{"version":3,"sources":["layout/Menu.js","utils/date-time.js","utils/format-reservation-date.js","utils/api.js","layout/ErrorAlert.js","dashboard/Dashboard.js","layout/NotFound.js","layout/NewReservation.js","layout/NewTable.js","layout/ReservationSeat.js","layout/Search.js","layout/EditReservation.js","layout/Routes.js","layout/Layout.js","App.js","index.js"],"names":["Menu","className","to","id","type","dateFormat","asDateString","date","getFullYear","toString","getMonth","padStart","getDate","today","Date","formatDate","reservation","reservation_date","match","formatReservationDate","reservations","Array","isArray","map","API_BASE_URL","process","REACT_APP_API_BASE_URL","headers","Headers","fetchJson","url","options","onCancel","a","fetch","response","status","json","payload","error","Promise","reject","message","data","name","console","stack","resolve","params","signal","URL","Object","entries","forEach","key","value","searchParams","append","log","then","formatReservationTime","ErrorAlert","Dashboard","datePointer","todayPointer","tables","todaysDate","loadTables","useState","setReservations","reservationsError","setReservationsError","reservationDates","setReservationDates","todayPoint","setTodayPoint","point","setPoint","pointRef","history","useHistory","search","useLocation","queryDate","URLSearchParams","get","reservedDates","sortedDates","theReservations","ourReservations","i","length","reservationDate","fixedReservationDate","substr","includes","push","sort","b","parse","indexOf","tableId","window","confirm","method","alert","reservation_id","requestOptions","body","JSON","stringify","useEffect","tempDate","location","href","split","abortController","AbortController","listReservations","catch","loadDashboard","getReservations","class","undefined","current","first_name","last_name","mobile_number","reservation_time","people","onClick","handleCancel","data-reservation-id-cancel","data-reservation-id-status","disabled","table","table_name","capacity","data-table-id-status","table_id","handleClick","data-table-id-finish","NotFound","NewReservation","firstName","setFirstName","lastName","setLastName","mobileNumber","setMobileNumber","setReservationDate","reservationTime","setReservationTime","setPeople","e","preventDefault","parseInt","onSubmit","onChange","target","placeholder","min","goBack","NewTable","tableName","setTableName","setCapacity","Number","ReservationSeat","setTable_id","useParams","Search","matchedReservations","setMatchedReservations","theReservation","theReservationsData","resDate","loadReservation","Routes","setTables","theTables","exact","path","EditReservation","Layout","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b67a36b8.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { Link } from \"react-router-dom\";\n\n/**\n * Defines the menu for this application.\n *\n * @returns {JSX.Element}\n */\n\nfunction Menu() {\n  return (\n    <nav className=\"navbar navbar-dark align-items-start p-0\">\n      <div className=\"container-fluid d-flex flex-column p-0\">\n        <Link\n          className=\"navbar-brand d-flex justify-content-center align-items-center sidebar-brand m-0\"\n          to=\"/\"\n        >\n          <div className=\"sidebar-brand-text mx-3\">\n            <span>Periodic Tables</span>\n          </div>\n        </Link>\n        <hr className=\"sidebar-divider my-0\" />\n        <ul className=\"nav navbar-nav text-light\" id=\"accordionSidebar\">\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/dashboard\">\n              <span className=\"oi oi-dashboard\" />\n              &nbsp;Dashboard\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/search\">\n              <span className=\"oi oi-magnifying-glass\" />\n              &nbsp;Search\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/reservations/new\">\n              <span className=\"oi oi-plus\" />\n              &nbsp;New Reservation\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/tables/new\">\n              <span className=\"oi oi-layers\" />\n              &nbsp;New Table\n            </Link>\n          </li>\n        </ul>\n        <div className=\"text-center d-none d-md-inline\">\n          <button\n            className=\"btn rounded-circle border-0\"\n            id=\"sidebarToggle\"\n            type=\"button\"\n          />\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nexport default Menu;\n","const dateFormat = /\\d\\d\\d\\d-\\d\\d-\\d\\d/;\nconst timeFormat = /\\d\\d:\\d\\d/;\n\n/**\n * Formats a Date object as YYYY-MM-DD.\n *\n * This function is *not* exported because the UI should generally avoid working directly with Date instance.\n * You may export this function if you need it.\n *\n * @param date\n *  an instance of a date object\n * @returns {string}\n *  the specified Date formatted as YYYY-MM-DD\n */\nfunction asDateString(date) {\n  return `${date.getFullYear().toString(10)}-${(date.getMonth() + 1)\n    .toString(10)\n    .padStart(2, \"0\")}-${date.getDate().toString(10).padStart(2, \"0\")}`;\n}\n\n/**\n * Format a date string in ISO-8601 format (which is what is returned from PostgreSQL) as YYYY-MM-DD.\n * @param dateString\n *  ISO-8601 date string\n * @returns {*}\n *  the specified date string formatted as YYYY-MM-DD\n */\nexport function formatAsDate(dateString) {\n  return dateString.match(dateFormat)[0];\n}\n\n/**\n * Format a time string in HH:MM:SS format (which is what is returned from PostgreSQL) as HH:MM.\n * @param timeString\n *  HH:MM:SS time string\n * @returns {*}\n *  the specified time string formatted as YHH:MM.\n */\nexport function formatAsTime(timeString) {\n  return timeString.match(timeFormat)[0];\n}\n\n/**\n * Today's date as YYYY-MM-DD.\n * @returns {*}\n *  the today's date formatted as YYYY-MM-DD\n */\nexport function today() {\n  return asDateString(new Date());\n}\n\n/**\n * Subtracts one day to the specified date and return it in as YYYY-MM-DD.\n * @param currentDate\n *  a date string in YYYY-MM-DD format (this is also ISO-8601 format)\n * @returns {*}\n *  the date one day prior to currentDate, formatted as YYYY-MM-DD\n */\nexport function previous(currentDate) {\n  let [ year, month, day ] = currentDate.split(\"-\");\n  month -= 1;\n  const date = new Date(year, month, day);\n  date.setMonth(date.getMonth());\n  date.setDate(date.getDate() - 1);\n  return asDateString(date);\n}\n\n/**\n * Adds one day to the specified date and return it in as YYYY-MM-DD.\n * @param currentDate\n *  a date string in YYYY-MM-DD format (this is also ISO-8601 format)\n * @returns {*}\n *  the date one day after currentDate, formatted as YYYY-MM-DD\n */\nexport function next(currentDate) {\n  let [ year, month, day ] = currentDate.split(\"-\");\n  month -= 1;\n  const date = new Date(year, month, day);\n  date.setMonth(date.getMonth());\n  date.setDate(date.getDate() + 1);\n  return asDateString(date);\n}\n","import { formatAsDate } from \"./date-time\";\n\nfunction formatDate(reservation) {\n  reservation.reservation_date = formatAsDate(reservation.reservation_date);\n  return reservation;\n}\n\n/**\n * Formats the reservation_date property of a reservation.\n * @param reservations\n *  a single reservation, or an array of reservations.\n * @returns {[reservation]|reservation}\n *  the specified reservation(s) with the reservation_date property formatted as YYYY-MM-DD.\n */\nexport default function formatReservationDate(reservations) {\n  return Array.isArray(reservations)\n    ? reservations.map(formatDate)\n    : formatDate(reservations);\n}\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nimport formatReservationDate from \"./format-reservation-date\";\nimport formatReservationTime from \"./format-reservation-date\";\n\nconst API_BASE_URL =\n  process.env.REACT_APP_API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  value to return if fetch call is aborted. Default value is undefined.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    const payload = await response.json();\n\n    if (payload.error) {\n      return Promise.reject({ message: payload.error });\n    }\n    return payload.data;\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing reservation.\n * @returns {Promise<[reservation]>}\n *  a promise that resolves to a possibly empty array of reservation saved in the database.\n */\n\nexport async function listReservations(params, signal) {\n  const url = new URL(`${API_BASE_URL}/reservations`);\n  Object.entries(params).forEach(([key, value]) =>\n    url.searchParams.append(key, value.toString())\n  );\n  console.log(url);\n  return await fetchJson(url, { headers, signal }, [])\n    .then(formatReservationDate)\n    .then(formatReservationTime);\n}\n","import React from \"react\";\n\n/**\n * Defines the alert message to render if the specified error is truthy.\n * @param error\n *  an instance of an object with `.message` property as a string, typically an Error instance.\n * @returns {JSX.Element}\n *  a bootstrap danger alert that contains the message string.\n */\n\nfunction ErrorAlert({ error }) {\n  return (\n    error && (\n      <div className=\"alert alert-danger m-2\">Error: {error.message}</div>\n    )\n  );\n}\n\nexport default ErrorAlert;\n","import React, { useEffect } from \"react\";\nimport useState from 'react-usestateref';\nimport { listReservations } from \"../utils/api\";\nimport ErrorAlert from \"../layout/ErrorAlert\";\nimport { useHistory, useLocation } from \"react-router\";\n\n/**\n * Defines the dashboard page.\n * @param date\n *  the date for which the user wants to view reservations.\n * @returns {JSX.Element}\n */\nfunction Dashboard({ date, tables, todaysDate, loadTables }) {\n  const [reservations, setReservations, reservationsRef] = useState([]);\n  const [reservationsError, setReservationsError] = useState(null);\n  const [reservationDates, setReservationDates, reservationDatesRef] = useState([]);\n  const [todayPoint, setTodayPoint, todayPointRef] = useState(0);\n  const [point, setPoint, pointRef] = useState(0);\n  const history = useHistory();\n\n  const search = useLocation().search;\n  const queryDate = new URLSearchParams(search).get('date');\n\n  \n  let datePointer;\n  let todayPointer;\n  let reservedDates = [];\n  let sortedDates = [];\n\n  // let today = new Date();\n  // let year = today.getFullYear();\n  // let month = today.getMonth() + 1;\n  // let day = today.getDate();\n  // let todaysDate = `${year}-${month}-${day}`;\n\n  useEffect(() => {\n    loadDashboard();\n    getReservations();\n    loadTables();\n  }, [date, search]);\n\n  // useEffect(() => {\n    \n  // }, [todaysDate]);\n\n  // useEffect(loadDashboard, [date, point]);\n\n  function loadDashboard() {\n    let tempDate = date;\n    if (window.location.href.includes(\"?\")){\n      tempDate = window.location.href.split(\"?\")[1].split(\"=\")[1]\n    }\n\n    const abortController = new AbortController();\n    setReservationsError(null);\n    listReservations({ date: tempDate }, abortController.signal)\n      .then(setReservations)\n      .catch(setReservationsError);\n    return () => abortController.abort();\n  }\n\n\n\n  async function getReservations(){\n    const response = await fetch(\"http://localhost:5000/reservations\");\n    const theReservations = await response.json();\n    const ourReservations = theReservations.data;\n    for (let i = 0 ; i < ourReservations.length; i++){\n        let reservationDate = ourReservations[i].reservation_date;\n        let fixedReservationDate = reservationDate.substr(0,10);\n        if (reservedDates.includes(fixedReservationDate)){\n          continue;\n        }\n        else{\n          reservedDates.push(fixedReservationDate);\n        }\n      }\n    if (!reservedDates.includes(todaysDate)){\n    reservedDates.push(todaysDate);\n    }\n    sortedDates = reservedDates.sort((a,b) => Date.parse(a) - Date.parse(b));\n    setReservationDates(sortedDates);\n    todayPointer = reservationDates.indexOf(todaysDate);\n    setTodayPoint(todayPointer);\n    if (queryDate){\n      if (sortedDates.includes(queryDate)){\n        datePointer = reservationDates.indexOf(queryDate);\n        setPoint(datePointer);\n      }\n    }\n    else{\n      datePointer = todayPointer;\n      setPoint(todayPointer);\n    }\n  }\n\n  function todayClick(){\n    setPoint(todayPoint);\n    history.push(`/dashboard`);\n  }\n\n  function nextClick(){\n    setPoint(point + 1);\n    history.push(`/dashboard?date=${reservationDates[pointRef.current]}`);\n    }\n  \n\n  function previousClick(){\n    setPoint(point - 1);\n    history.push(`/dashboard?date=${reservationDates[pointRef.current]}`);\n  }\n\n  async function handleClick(tableId){\n    if (window.confirm(\"Is this table ready to seat new guests? This cannot be undone.\")){\n      fetch(`http://localhost:5000/tables/${tableId}/seat/`, {\n        method: \"DELETE\",\n        headers: { 'Content-Type': 'application/json' },\n      });\n      window.alert(\"Table ready to seat new guests!\")\n      await loadTables();\n    }\n  }\n\n  async function handleCancel(reservation_id){\n    const requestOptions = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ \n        data:{\n          status: \"cancelled\"\n      } \n    })\n  };\n    if (window.confirm(\"Do you want to cancel this reservation? This cannot be undone.\")){\n      fetch(`http://localhost:5000/reservations/${reservation_id}/status`, requestOptions)\n        .then(response => response.json())\n        .then(data => console.log(data));\n      window.alert(\"Reservation Cancelled.\");\n      await loadTables();\n    }\n  }\n\n  \n\n  return (\n    <main class=\"border border-dark py-2\">\n      <h1 className=\"pl-3\">Dashboard</h1>\n      <div className=\"d-md-flex mb-3\">\n        <h4 className=\"pl-3 mb-0\">{`Reservations for date ${point === undefined ? \"\" : reservationDates[pointRef.current]}`}</h4>\n      </div>\n      <ErrorAlert error={reservationsError} />\n      {/* {JSON.stringify(reservations)} */}\n      {reservations.map((reservation) =>(\n        <div className=\"m-3\" key={reservation.reservation_id}>\n          <div className=\"row m-3\">\n          <p className=\"col-2 mx-2\">{`First Name: ${reservation.first_name}`}</p>\n          <p className=\"col-2 mx-2\">{`Last Name: ${reservation.last_name}`}</p>\n          <p className=\"col-2 mx-2\">{`Mobile Number: ${reservation.mobile_number}`}</p>\n          <p className=\"col-2 mx-2\">{`Reservation Date: ${reservation.reservation_date}`}</p>\n          <p className=\"col-2 mx-2\">{`Reservation Time: ${reservation.reservation_time}`}</p>\n          <p className=\"col-2 mx-2\">{`Party Size: ${reservation.people}`}</p>\n          </div>\n            <a className=\"btn btn-danger m-2\" \n            onClick={() => handleCancel(reservation.reservation_id)}\n          data-reservation-id-cancel={reservation.reservation_id}\n          href={`/reservations/${reservation.reservation_id}/seat`}>Cancel</a>\n          {reservation.status === \"booked\" &&\n            <a className=\"btn btn-success m-2\"\n          data-reservation-id-status={reservation.reservation_id}\n          href={`/reservations/${reservation.reservation_id}/seat`}>Seat</a>\n          }\n          <a className=\"btn btn-primary m-2\"href={`/reservations/${reservation.reservation_id}/edit`}>Edit</a> \n        </div>\n      ))}\n      <div className=\"text-center\">\n        <button className=\"btn btn-info mx-1\" onClick={() => previousClick()}\n        disabled={pointRef.current === 0}>Previous</button>\n        <button className=\"btn btn-info mx-1\" onClick={() => todayClick()}>Today</button>\n        <button className=\"btn btn-info mx-1\" onClick={() => nextClick()}\n        disabled={pointRef.current === reservationDates.length - 1}>Next</button>\n      </div>\n      <h3 className=\"pl-3 py-2 my-4 border-top border-dark\">Tables:</h3>\n      {\n      tables.map((table) =>(\n        <div className=\"row text-center py-3 pl-5\" key={table.table_id}>\n          <p className=\"col-3 mx-2\">{`Table Name: ${table.table_name}`}</p>\n          <p className=\"col-3 mx-2\">{`Capacity: ${table.capacity}`}</p>\n          <p\n          data-table-id-status={table.table_id}\n          className=\"col-3 mx-2\"\n          >{`Status: ${table.status}`}</p>\n          { table.status === \"occupied\" &&\n            <button\n            className=\"btn btn-warning mx-3 h-25\"\n            onClick={() => handleClick(table.table_id)}\n            data-table-id-finish={table.table_id}\n            >Finish</button>\n          }\n        </div>\n      ))}\n      \n    </main>\n  );\n}\n\nexport default Dashboard;\n","import React from \"react\";\n\n/**\n * Defines the \"Not Found\" page that is displayed for any unmatched route.\n *\n * You will not need to make changes to this file.\n *\n * @returns {JSX.Element}\n */\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React, { useState } from \"react\";\nimport {useHistory} from \"react-router-dom\";\n// const reservations = require(\"../../back-end/src/db/seeds/00-reservations.json\");\n\nfunction NewReservation(){\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    const [mobileNumber, setMobileNumber] = useState(\"\");\n    const [reservationDate, setReservationDate] = useState();\n    const [reservationTime, setReservationTime] = useState();\n    const [people, setPeople] = useState(1);\n\n    console.log(typeof people);\n    const history = useHistory();\n\n    async function handleSubmit(e){\n      e.preventDefault();\n      const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          data:{\n            first_name: firstName,\n            last_name: lastName,\n            mobile_number: mobileNumber,\n            reservation_date: reservationDate,\n            reservation_time: reservationTime,\n            people: parseInt(people)\n        } \n      })\n    };\n    fetch('http://localhost:5000/reservations', requestOptions)\n        .then(response => response.json())\n        .then(data => console.log(data));\n        history.push(\"/dashboard\");\n    }\n\n    return(\n        <form className=\"pl-3\" onSubmit={handleSubmit}>\n          <h3>New Reservation:</h3>\n          <div class=\"mb-3\">\n                <label className=\"row\">First Name:</label>\n                <input className=\"row col-8\" type=\"text\" value={firstName} onChange={(e) => setFirstName(e.target.value)} name=\"first_name\" placeholder=\"First Name\"/>\n          </div>\n          <div class=\"mb-3\">\n                <label className=\"row\">Last Name:</label>\n                <input className=\"row col-8\" type=\"text\" value={lastName} onChange={(e) => setLastName(e.target.value)} name=\"last_name\" placeholder=\"Last Name\"/>\n          </div>\n          <div class=\"mb-3\">\n                <label className=\"row\">Mobile Number:</label>\n                <input className=\"row col-8\" type=\"text\" value={mobileNumber} onChange={(e) => setMobileNumber(e.target.value)} name=\"mobile_number\" placeholder=\"XXX-XXX-XXXX\"/>\n          </div>\n          <div class=\"mb-3\">\n                <label className=\"row\">Reservation Date:</label>\n                <input className=\"row col-8\" type=\"date\" value={reservationDate} onChange={(e) => setReservationDate(e.target.value)} name=\"reservation_date\" />\n          </div>\n          <div class=\"mb-3\">\n                <label className=\"row\">Reservation Time:</label>\n                <input className=\"row col-8\" type=\"time\" value={reservationTime} onChange={(e) => setReservationTime(e.target.value)} name=\"reservation_time\" />\n          </div>\n          <div class=\"mb-3\">\n                <label className=\"row\">People:</label>\n                <input className=\"row col-8\" type=\"number\" value={people} onChange={(e) => setPeople(e.target.value)} name=\"people\" min=\"1\" placeholder=\"XXX-XXX-XXXX\"/>\n          </div>\n                <button className=\"btn btn-danger mx-1\" onClick={() => history.goBack()}>Cancel</button>\n                <button className=\"btn btn-success mx-1\" type=\"submit\">Submit</button>\n        </form>\n    );\n}\n\nexport default NewReservation;","import React, { useState } from \"react\";\nimport {useHistory} from \"react-router-dom\";\n\nfunction NewTable({loadTables}){\n    const [tableName, setTableName] = useState(\"\");\n    const [capacity, setCapacity] = useState(1);\n\n    const history = useHistory();\n\n    async function handleSubmit(e){\n      e.preventDefault();\n      const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          data:{\n            table_name: tableName,\n            capacity: Number(capacity)\n        } \n      })\n    };\n    fetch('http://localhost:5000/tables', requestOptions)\n        .then(response => response.json())\n        .then(data => console.log(data));\n        await loadTables();\n        history.push(\"/dashboard\");\n    }\n\n\n    return(\n        <form className=\"pl-3\" onSubmit={handleSubmit}>\n          <h3>New Table: </h3>\n          <div class=\"mb-3\">\n                <label className=\"row\">Table Name</label>\n                <input className=\"row col-8\" type=\"text\" value={tableName} onChange={(e) => setTableName(e.target.value)} name=\"table_name\" placeholder=\"Table Name\"/>\n          </div>\n          <div class=\"mb-3\">\n                <label className=\"row\">Capacity</label>\n                <input className=\"row col-8\" type=\"number\" value={capacity} onChange={(e) => setCapacity(e.target.value)} name=\"capacity\" min=\"1\" />\n          </div>\n          <div className=\"row pl-3\">\n                <button className=\"btn btn-danger mx-2 text-center\" onClick={() => history.goBack()}>Cancel</button>\n                <button className=\"btn btn-success mx-2 text-center\" type=\"submit\">Submit</button>\n          </div>\n        </form>\n    );\n}\n\nexport default NewTable;","import React, { useState } from \"react\";\nimport {useHistory, useParams} from \"react-router-dom\";\n\nfunction ReservationSeat({tables, loadTables}){\n    const [table_id, setTable_id] = useState(1);\n    console.log(table_id);\n\n    const {reservation_id} = useParams();\n    const history = useHistory();\n\n    async function handleSubmit(e){\n        e.preventDefault();\n      const requestOptions = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          data:{\n                reservation_id: reservation_id\n        } \n      })\n    };\n    \n    fetch(`http://localhost:5000/tables/${table_id}/seat/`, requestOptions)\n        .then(response => response.json())\n        .then(data => console.log(data));\n        await loadTables();\n        history.push(\"/dashboard\");\n    }\n\n    return(\n        <form onSubmit={handleSubmit}>\n                <h3>Seat Reservation</h3>\n                <div class=\"m-3\">\n                    <label className=\"row\">Choose Table ID:</label>\n                    <select className=\"row col-4\" id=\"table_id\" name=\"table_id\" onChange={(e) => setTable_id(e.target.value)}>\n                        {tables.map((table) => (\n                            <option key={table.table_id} value={table.table_id}>{table.table_name} - {table.capacity}</option>\n                        ))}\n                    </select>\n                </div>\n                <button className=\"btn btn-danger mx-2 text-center\" onClick={() => history.goBack()}>Cancel</button>\n                <button className=\"btn btn-success mx-2 text-center\" type=\"submit\">Submit</button>\n        </form>\n    );\n}\n\nexport default ReservationSeat;","import React, { useState } from \"react\";\n\nfunction Search({loadTables}){\n    const [mobileNumber, setMobileNumber] = useState(\"Enter a customer's phone number\");\n    const [matchedReservations, setMatchedReservations] = useState([]);\n\n    async function handleSubmit(e){\n        e.preventDefault();\n        const response = await fetch(\n             `http://localhost:5000/reservations/search?mobile_number=${mobileNumber}`\n              );\n        const reservations = await response.json();\n        setMatchedReservations(mobileNumber !== \"\" ? reservations.data : []);\n        \n    }\n\n    async function handleClick(reservation_id){\n        if (window.confirm(\"Do you want to cancel this reservation? This cannot be undone.\")){\n                await fetch(`https://reservations/${reservation_id}/status`, {\n                    method: 'PUT',\n                    body: JSON.stringify({data: { status: 'cancelled' }})\n                });\n                await loadTables();\n        }\n    }\n\n\n    return(\n        <div>\n            <h3>Reservation Search:</h3>\n            <form onSubmit={handleSubmit}>\n                    <label>Mobile Number:</label>\n                    <input className=\"m-2 col-4\" type=\"text\" value={mobileNumber} onChange={(e) => setMobileNumber(e.target.value)} name=\"mobile_number\" />\n                    <button className=\"btn btn-success m-1\" type=\"submit\">Find</button>\n            </form>\n            <div>\n                {matchedReservations == null && <div> No Reservations Found</div>}\n                {matchedReservations !== null && matchedReservations.length === 0 && <h4>No Reservations Found</h4>}\n                {matchedReservations !== null && matchedReservations.length > 0 && <h4>Matching Records:</h4>}\n                {matchedReservations.map((reservation) =>(\n                    <div className=\"row border border-dark m-3\" key={reservation.reservation_id}>\n                    <p className=\"col-2 mx-2\">{`First Name: ${reservation.first_name}`}</p>\n                    <p className=\"col-2 mx-2\">{`Last Name: ${reservation.last_name}`}</p>\n                    <p className=\"col-2 mx-2\">{`Mobile Number: ${reservation.mobile_number}`}</p>\n                    <p className=\"col-2 mx-2\">{`Reservation Date: ${reservation.reservation_date}`}</p>\n                    <p className=\"col-2 mx-2\">{`Reservation Time: ${reservation.reservation_time}`}</p>\n                    <p className=\"col-2 mx-2\">{`Party Size: ${reservation.people}`}</p> \n                    <a className=\"btn btn-primary m-2\" href={`/reservations/${reservation.reservation_id}/edit`}>Edit</a>\n                    <button\n                    className=\"btn btn-danger m-2\"\n                    onClick={() => handleClick(reservation.reservation_id)}\n                    data-reservation-id-cancel={reservation.reservation_id}>\n                        Cancel\n                    </button>\n                  </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default Search;","import React, { useState, useEffect } from \"react\";\nimport {useHistory, useParams} from \"react-router-dom\";\n\nfunction NewReservation(){\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    const [mobileNumber, setMobileNumber] = useState(\"\");\n    const [reservationDate, setReservationDate] = useState();\n    const [reservationTime, setReservationTime] = useState();\n    const [people, setPeople] = useState(1);\n\n    const { reservation_id } = useParams();\n    const history = useHistory();\n\n    useEffect(() => {\n        async function loadReservation(){\n            const response = await fetch(`http://localhost:5000/reservations/${reservation_id}`);\n            const theReservation = await response.json();\n            const theReservationsData = theReservation.data;\n            setFirstName(theReservationsData.first_name);\n            setLastName(theReservationsData.last_name);\n            setMobileNumber(theReservationsData.mobile_number);\n            const resDate = theReservationsData.reservation_date.substr(0,10);\n            setReservationDate(resDate);\n            setReservationTime(theReservationsData.reservation_time);\n            setPeople(theReservationsData.people);\n            console.log(theReservationsData);\n        }\n        loadReservation();\n    },[reservation_id])\n\n    async function handleSubmit(e){\n        e.preventDefault();\n      const requestOptions = {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          data:{\n            first_name: firstName,\n            last_name: lastName,\n            mobile_number: mobileNumber,\n            reservation_date: reservationDate,\n            reservation_time: reservationTime,\n            people: Number(people)\n        } \n      })\n    };\n    fetch(`http://localhost:5000/reservations/${reservation_id}`, requestOptions)\n        .then(response => response.json())\n        .then(data => console.log(data));\n        history.push(\"/dashboard\");\n    }\n\n    return(\n      <form className=\"pl-3\" onSubmit={handleSubmit}>\n      <h3>New Reservation:</h3>\n      <div class=\"mb-3\">\n            <label className=\"row\">First Name:</label>\n            <input className=\"row col-8\" type=\"text\" value={firstName} onChange={(e) => setFirstName(e.target.value)} name=\"first_name\" placeholder=\"First Name\"/>\n      </div>\n      <div class=\"mb-3\">\n            <label className=\"row\">Last Name:</label>\n            <input className=\"row col-8\" type=\"text\" value={lastName} onChange={(e) => setLastName(e.target.value)} name=\"last_name\" placeholder=\"Last Name\"/>\n      </div>\n      <div class=\"mb-3\">\n            <label className=\"row\">Mobile Number:</label>\n            <input className=\"row col-8\" type=\"text\" value={mobileNumber} onChange={(e) => setMobileNumber(e.target.value)} name=\"mobile_number\" placeholder=\"XXX-XXX-XXXX\"/>\n      </div>\n      <div class=\"mb-3\">\n            <label className=\"row\">Reservation Date:</label>\n            <input className=\"row col-8\" type=\"date\" value={reservationDate} onChange={(e) => setReservationDate(e.target.value)} name=\"reservation_date\" />\n      </div>\n      <div class=\"mb-3\">\n            <label className=\"row\">Reservation Time:</label>\n            <input className=\"row col-8\" type=\"time\" value={reservationTime} onChange={(e) => setReservationTime(e.target.value)} name=\"reservation_time\" />\n      </div>\n      <div class=\"mb-3\">\n            <label className=\"row\">People:</label>\n            <input className=\"row col-8\" type=\"number\" value={people} onChange={(e) => setPeople(e.target.value)} name=\"people\" min=\"1\" placeholder=\"XXX-XXX-XXXX\"/>\n      </div>\n            <button className=\"btn btn-danger mx-1\" onClick={() => history.goBack()}>Cancel</button>\n            <button className=\"btn btn-success mx-1\" type=\"submit\">Submit</button>\n    </form>\n    );\n}\n\nexport default NewReservation;","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Dashboard from \"../dashboard/Dashboard\";\nimport NotFound from \"./NotFound\";\nimport { today } from \"../utils/date-time\";\nimport NewReservation from \"./NewReservation\";\nimport NewTable from \"./NewTable\";\nimport ReservationSeat from \"./ReservationSeat\";\nimport Search from \"./Search\";\nimport EditReservation from \"./EditReservation\";\n\n/**\n * Defines all the routes for the application.\n *\n * You will need to make changes to this file.\n *\n * @returns {JSX.Element}\n */\n\n\n\nfunction Routes() {\n\n  const [tables, setTables] = useState([]);\n\n useEffect(() => {\n  async function loadTables() {\n    const response = await fetch(\n      `http://localhost:5000/tables`\n    );\n    const theTables = await response.json();\n    setTables(theTables.data);\n  }\n  loadTables();\n  \n}, []);\n\n// const loadTables = useCallback(async() => {\n//   const response = await fetch(\n//   `http://localhost:5000/tables`\n//   );\n//   const theTables = await response.json();\n//   setTables(theTables.data);\n// }, [])\n\n  async function loadTables() {\n    const response = await fetch(\n      `http://localhost:5000/tables`\n    );\n    const theTables = await response.json();\n    setTables(theTables.data);\n  }\n\n  return (\n    <Switch>\n      <Route exact={true} path=\"/\">\n        <Redirect to={\"/dashboard\"} />\n      </Route>\n      <Route exact={true} path=\"/reservations\">\n        <Redirect to={\"/dashboard\"} />\n      </Route>\n      <Route path=\"/dashboard\">\n        <Dashboard date={today()} tables={tables} todaysDate={today()} loadTables={loadTables}/>\n      </Route>\n      <Route path=\"/reservations/new\">\n        <NewReservation loadTables={loadTables}/>\n      </Route>\n      <Route path=\"/reservations/:reservation_id/seat\">\n        <ReservationSeat tables={tables} loadTables={loadTables}/>\n      </Route>\n      <Route path=\"/reservations/:reservation_id/edit\">\n        <EditReservation tables={tables} loadTables={loadTables}/>\n      </Route>\n      <Route path=\"/tables/new\">\n        <NewTable loadTables={loadTables}/>\n      </Route>\n      <Route path=\"/search\">\n        <Search loadTables={loadTables}/>\n      </Route>\n      <Route>\n        <NotFound />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default Routes;\n","import React from \"react\";\nimport Menu from \"./Menu\";\nimport Routes from \"./Routes\";\n\nimport \"./Layout.css\";\n\n/**\n * Defines the main layout of the application.\n *\n * You will not need to make changes to this file.\n *\n * @returns {JSX.Element}\n */\nfunction Layout() {\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row h-100\">\n        <div className=\"col-md-2 side-bar\">\n          <Menu />\n        </div>\n        <div className=\"col\">\n          <Routes />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./layout/Layout\";\n\n/**\n * Defines the root application component.\n * @returns {JSX.Element}\n */\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/\">\n        <Layout />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}